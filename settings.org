* Package List
#+BEGIN_SRC emacs-lisp +n
  (setq package-list
        '(projectile
          popwin

          use-package

          ivy
          counsel
          swiper
          
          smartparens
          rainbow-delimiters
          
          better-defaults
          spacemacs-theme
          powerline
          spaceline

          exec-path-from-shell
          bash-completion

          multiple-cursors
          evil-nerd-commenter

          ace-jump-mode

          flycheck
          magit

          company
          nlinum
          undo-tree
          
          haskell-mode
          flycheck-haskell
          company-ghc
          hi2

          python-mode
          anaconda-mode
          company-anaconda
          pyenv-mode
          virtualenvwrapper))
#+END_SRC
** Setup Packages
#+BEGIN_SRC emacs-lisp +n 
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  (package-initialize)

                                          ; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package package-list) ;Installs missing packages
    (unless (package-installed-p package)
      (package-install package)))

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp +n
  (display-time)
  (require 'smartparens-config)
  (require 'spaceline-config)

  (spaceline-emacs-theme)
  (setq-default powerline-default-separator nil)

  (require 'rainbow-delimiters)
  (require 'bash-completion)
  (require 'powerline)

  (load-theme 'spacemacs-dark t)

  (add-hook 'prog-mode-hook (lambda ()
                              (rainbow-delimiters-mode)
                              (nlinum-mode)))
  (bash-completion-setup)

  (global-company-mode)
  (global-flycheck-mode)
  (global-hl-line-mode 1)
  (smartparens-global-mode)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-message t) 
  (setq initial-buffer-choice "~/Development/agenda.org")
  (setq initial-scratch-message nil)
  (setq default-cursor-type 'bar)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp +n
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers)
    :bind
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("<f6>" . ivy-resume)
     ("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("C-x C-f" . counsel-find-file)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("C-h l" . counsel-load-library)
     ("C-h i" . counsel-info-lookup-symbol)
     ("C-S-u" . counsel-unicode-char)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ("C-x l" . counsel-locate)
     ("C-S-o" . counsel-rhythmbox)
     :map read-expression-map
     ("C-r"   . counsel-expression-history))
    )
#+END_SRC

** Autosave
#+BEGIN_SRC emacs-lisp +n
  (defvar my-auto-save-folder "~/.emacs.d/auto-save/")
  (setq auto-save-list-file-prefix "~/.emacs.d/auto-save/.saves-"); set prefix for auto-saves 
  (setq auto-save-file-name-transforms `((".*", my-auto-save-folder t))); location for all auto-save files
  (setq tramp-auto-save-directory my-auto-save-folder)
#+END_SRC
** Popwin
#+BEGIN_SRC emacs-lisp +n
  (require 'popwin)
  (popwin-mode 1)
  (push '("*anaconda-doc*" :width 100 :height 50 :position left) popwin:special-display-config)
#+END_SRC
** Linum Modes
#+BEGIN_SRC emacs-lisp +n
  (setq nlinum-format " %d ")
  (add-hook 'nlinum-mode-hook
            (lambda ()
              (setq nlinum--width
                (length (number-to-string
                         (count-lines (point-min) (point-max)))))))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp +n
  (projectile-global-mode +1)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'ivy)
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp +n
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "s-,") 'mc/skip-previous-like-this)
  (global-set-key (kbd "s-.") 'mc/skip-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "s-/") 'set-rectangular-region-anchor)

#+END_SRC

* Lanugages
** Haskell
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-hi2)
  (add-hook 'haskell-mode-hook             'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (custom-set-variables
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t))
  (eval-after-load 'haskell-mode 
    '(progn
       (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-load-or-reload)
       (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
       (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
       (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
       (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
       (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)
       (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)))
#+END_SRC
** C/C++
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode t)
  (setq c-default-style "linux"
        c-basic-offset 4)
  (defun my-open-block-c-mode (id action context)
    (when (eq action 'insert)
      (newline)
      (newline)
      (indent-according-to-mode)
      (previous-line)
      (indent-according-to-mode)))
  (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (setq-default py-shell-name "ipython")
  (setq python-indent-guess-indent-offset nil)
  (setq python-indent-offset 4)
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'eldoc-mode)
  (pyenv-mode)
  (defun my/run-python ()
    (interactive)
    (run-python "ipython"))

  (defun my/python-shell ()
    (interactive)
    (my/run-python)
    (python-shell-switch-to-shell))

  (define-key python-mode-map (kbd "C-c C-z") 'my/python-shell)
  (global-set-key [remap run-python] 'my/run-python)
  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (setq venv-location "~/Development/Virtual_Environments/")
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
))
#+END_SRC
** Octave
#+BEGIN_SRC emacs-lisp
 (autoload 'octave-mode "octave-mod" nil t)
            (setq auto-mode-alist
                  (cons '("\\.m$" . octave-mode) auto-mode-alist))

  (add-hook 'octave-mode-hook
                      (lambda ()
                        (nlinum-mode)
                        (abbrev-mode 1)
                        (auto-fill-mode 1)
                        (if (eq window-system 'x)
                            (font-lock-mode 1))))

#+END_SRC 

** LaTeX
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
#+END_SRC
* Custom Variables
#+BEGIN_SRC emacs-lisp
  (setq primary-modes
        '("shell-mode"
          "inferior-python-mode"
          "inferior-octave-mode"
          "magit-mode"
          "magit-status-mode"))
  (setq longlines-wrap-follows-window-size t)
#+END_SRC
* Custom Funcions
#+BEGIN_SRC emacs-lisp
  (defun configure/emacs ()
    (interactive)
    (find-file "~/.emacs.d/settings.org"))

  (defun reload/emacs ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/settings.org"))

  (defun nxt ()
    (interactive)
    (my-next-buffer (function next-buffer)))

  (defun prv ()
    (interactive)
    (my-next-buffer (function previous-buffer)))

  (global-set-key [remap next-buffer] 'nxt)
  (global-set-key [remap previous-buffer] 'prv)

  (defun custom/kill-buffer ()
    (interactive)
    (when (not (equal "agenda.org" (buffer-name)))
      (kill-this-buffer)
      (nxt))
    )

  (global-set-key [remap kill-this-buffer] 'custom/kill-buffer)

  (defun custom/current-mode ()
    (interactive)
    (message (symbol-name major-mode)))

  (defun ssh/ews ()
    (interactive)
    (find-file "/ssh:akmishr2@remlnx.ews.illinois.edu:/home/akmishr2"))

  (defun custom/refresh ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))

  (defun custom/kill-line ()
    "Kills line and fixes indentation"
    (interactive)
    (kill-line)
    (indent-according-to-mode))

  (defun custom/kill-whole-line ()
    (interactive)
    (kill-whole-line)
    (beginning-of-line-text))

  (defun custom/line-beginning ()
    "Move point to the beginning of text on the current line; if that is already
        the current position of point, then move it to the beginning of the line."
    (interactive)
    (let ((pt (point)))
      (beginning-of-line-text)
      (when (eq pt (point))
        (beginning-of-line))))

  (defun custom/open-line ()
    "Insert an empty line after the current line.
         Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun custom/open-line-above ()
    "Insert an empty line above the current line.
        Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (defun custom/launch-term ()
    (interactive)
    (call-process "termite" nil 0 nil "-d" default-directory))


  (defun configure/xmonad ()
    (interactive)
    (find-file "~/.xmonad/xmonad.hs"))

  (defun configure/nix-local ()
    (interactive)
    (find-file "~/.nixpkgs/config.nix"))

  (defun configure/nix-global ()
    (interactive)
    (ido-find-file "/etc/nixos/configuration.nix"))
#+END_SRC
* Global Keybindings
#+BEGIN_SRC emacs-lisp +n
  (require 'bind-key)
  (bind-keys
   ("C-x C-m" . execute-extended-command)
   ("C-o"     . custom/open-line-above)
   ("C-j"     . custom/open-line)
   ("C-k"     . custom/kill-line)
   ("C-S-k"   . custom/kill-whole-line)
   ("C-c t"   . custom/launch-term)
   ("s->"     . nxt)
   ("s-<"     . prv)
   ("s-d"     . sp-kill-sexp)
   ("M-g S"   . magit-stage-file)
   )
#+END_SRC
* Org settings
#+BEGIN_SRC emacs-lisp +n
  (setq org-src-fontify-natively t)
  (setq org-src-ask-before-returning-to-edit-buffer nil)
  (setq org-src-window-setup (quote current-window))
#+END_SRC




